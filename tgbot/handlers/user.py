from datetime import datetime

import pytz as pytz
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove

from tgbot.config import Config
from tgbot.keyboards.reply import yes_no_keyboard, initial_payment_keyboard, budget_keyboard
from tgbot.misc.states import QuestionsState
from tgbot.services.google_sheets import write_to_sheet

user_router = Router()


@user_router.message(CommandStart(), flags={'throttling_key': 'default'})
async def user_start(message: Message, state: FSMContext):
    await state.clear()
    text = (
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –û—Ç–≤–µ—Ç—å—Ç–µ –≤—Å–µ–≥–æ –Ω–∞ 5 –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–Ω—è—Ç—å, '
        '–∫–∞–∫–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –º—ã —Å–º–æ–∂–µ–º –í–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å\n\n'

        '1. –ö–∞–∫–∏–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ –í—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –∫ –ø–æ–∫—É–ø–∫–µ? (–ù–∞–ø–∏—à–∏—Ç–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –í–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è)')
    await message.answer(text=text, reply_markup=ReplyKeyboardRemove())
    await state.set_state(QuestionsState.Q1)


@user_router.message(QuestionsState.Q1, F.text)
async def process_answer1(message: Message, state: FSMContext):
    answer = message.text.strip()
    if len(answer) > 100:
        await message.answer('<b>–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤!</b>')
        return
    await message.answer(text='<b>2. –ï—Å—Ç—å –ª–∏ —É –í–∞—Å SSN?\n'
                              '(–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ - –º—ã –æ—Ñ–æ—Ä–º–ª—è–µ–º –∞–≤—Ç–æ –¥–∞–∂–µ –±–µ–∑ SSN)</b>',
                         reply_markup=yes_no_keyboard)

    await state.set_state(QuestionsState.Q2)
    await state.update_data(car_brands=answer)


@user_router.message(QuestionsState.Q2, F.text)
async def process_answer2(message: Message, state: FSMContext):
    answer = message.text.strip().upper()
    if answer == '–î–ê':
        using_ssn = True
    elif answer == '–ù–ï–¢':
        using_ssn = False
    else:
        await message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç"</b>')
        return

    await state.set_state(QuestionsState.Q3)
    await state.update_data(using_ssn=using_ssn)
    await message.answer(text='<b>3. –ë—É–¥–µ—Ç–µ –ª–∏ –í—ã –±—Ä–∞—Ç—å –∞–≤—Ç–æ-–∫—Ä–µ–¥–∏—Ç?</b>',
                         reply_markup=yes_no_keyboard)


@user_router.message(QuestionsState.Q3, F.text)
async def process_answer3(message: Message, state: FSMContext):
    answer = message.text.strip().upper()
    if answer == '–î–ê':
        credit = True
        await message.answer(text='<b>4. –ö–∞–∫–æ–π –±—É–¥–µ—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å?</b>',
                             reply_markup=initial_payment_keyboard())
        await state.set_state(QuestionsState.waiting_initial_payment)
    elif answer == '–ù–ï–¢':
        credit = False
        await message.answer(text='<b>4. –ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –∑–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É?</b>',
                             reply_markup=budget_keyboard())
        await state.set_state(QuestionsState.waiting_budget)

    else:
        await message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç"</b>')
        return

    await state.update_data(credit=credit)


@user_router.message(QuestionsState.waiting_initial_payment, F.text)
async def process_initial_payment(message: Message, state: FSMContext):
    answer = message.text.strip()
    if len(answer) > 50:
        await message.answer('<b>–¢–µ–∫—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤</b>')
        return

    await state.set_state(QuestionsState.waiting_phone)
    await state.update_data(initial_payment=answer)
    await message.answer('<b>5. –í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>',
                         reply_markup=ReplyKeyboardRemove())


@user_router.message(QuestionsState.waiting_budget, F.text)
async def process_initial_payment(message: Message, state: FSMContext):
    answer = message.text.strip()
    if len(answer) > 50:
        await message.answer('<b>–¢–µ–∫—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤</b>')
        return

    await state.set_state(QuestionsState.waiting_phone)
    await state.update_data(budget=answer)
    await message.answer('<b>5. –í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>',
                         reply_markup=ReplyKeyboardRemove())


@user_router.message(QuestionsState.waiting_phone, F.text.regexp(r'\d+', search=True))
async def process_phone_number(message: Message, state: FSMContext, config: Config):
    username = message.from_user.username if message.from_user.username else '-'
    phone = message.text.strip()

    if len(phone) > 21:
        await message.answer('<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 21 —Å–∏–º–≤–æ–ª–∞</b>')
        return

    data = await state.get_data()
    car_brands = data.get('car_brands')
    using_ssn = data.get('using_ssn')
    using_ssn = '–ï—Å—Ç—å' if using_ssn else '–ù–µ—Ç'
    credit = data.get('credit')
    credit = '–í –∫—Ä–µ–¥–∏—Ç' if credit else '–ù–∞–ª–∏—á–Ω—ã–º–∏'
    initial_payment = data.get('initial_payment', '-')
    budget = data.get('budget', '-')

    tz = pytz.timezone('America/Los_Angeles')
    date_time = datetime.now(tz=tz)
    date = date_time.date().strftime('%d.%m.%Y')
    time = date_time.time().strftime('%H:%M')

    try:
        google_client_manager = config.misc.google_client_manager
        google_client = await google_client_manager.authorize()
        key = '12u88lB9kssi8U5WbClSrfeZ51aWMq4qVgQ19VPJGWIg'
        spreadsheet = await google_client.open_by_key(key)
        worksheet = await spreadsheet.worksheet('–õ–∏—Å—Ç1')
        await write_to_sheet(worksheet, date, time, username, phone, car_brands, using_ssn, credit, initial_payment,
                             budget)
    except Exception as e:
        print(e)
    else:
        await message.answer(
            '<b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.</b>\n\n'
            '–ú—ã –ø–æ–∑–≤–æ–Ω–∏–º –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è, —Å–∫–∏–Ω–µ–º –Ω–∞ –í–∞—à –Ω–æ–º–µ—Ä –ø–æ SMS –ª–æ–∫–∞—Ü–∏—é, –∏ –Ω–∞—à —Å–∞–π—Ç.\n'
            '–¢–∞–∫–∂–µ —Ä–∞—Å—Å–∫–∞–∂–µ–º –ø—Ä–æ —Ü–µ–Ω—ã, —É—Å–ª–æ–≤–∏—è, –∏ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ–º –ø–æ'
            ' –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –í–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å ü§ù')

    finally:
        await state.clear()


@user_router.message(QuestionsState.waiting_phone)
async def process_wrong_phone_number(message: Message):
    await message.answer('<b>–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –û–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ —Å–µ–±–µ —Ü–∏—Ñ—Ä—ã.\n'
                         '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b>')
